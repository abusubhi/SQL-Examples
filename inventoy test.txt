CREATE DATABASE store;

USE store;

CREATE TABLE Category (
    category_id INT PRIMARY KEY NOT NULL,
    category_name VARCHAR(50)
);

CREATE TABLE products (
  product_id INT IDENTITY PRIMARY KEY(1,1) NOT NULL,
  product_name VARCHAR(50) NOT NULL,
  product_description VARCHAR(255) NOT NULL,
  product_price DECIMAL(10,2) NOT NULL,
  product_quantity INT NOT NULL
);

CREATE TABLE customers (
  customer_id INT IDENTITY(1,1) NOT NULL,
  customer_name VARCHAR(50) NOT NULL,
  customer_address VARCHAR(255) NOT NULL,
  customer_phone_number VARCHAR(15) NOT NULL,
  customer_email VARCHAR(50) NOT NULL
);

CREATE TABLE sales (
  sale_id INT IDENTITY(1,1) NOT NULL,
  sale_date DATETIME NOT NULL,
  sale_time TIME NOT NULL,
  sale_total DECIMAL(10,2) NOT NULL
);

CREATE TABLE sales_details (
  sale_detail_id INT IDENTITY(1,1) NOT NULL,
  sale_id INT FOREIGN KEY NOT NULL,
  product_id INT FOREIGN KEY NOT NULL,
  quantity INT NOT NULL,
  sale_price DECIMAL(10,2) NOT NULL
);


INSERT INTO Category (category_id, category_name)
VALUES
    (1, 'Electronics'),
    (2, 'Clothing'),
    (3, 'Books');

INSERT INTO products (product_name, product_description, product_price, product_quantity)
VALUES
    ('T-Shirt', 'A plain white T-shirt', 10.00, 100),
    ('Jeans', 'A pair of blue jeans', 20.00, 50),
    ('Shoes', 'A pair of black shoes', 30.00, 20);

INSERT INTO customers (customer_name, customer_address, customer_phone_number, customer_email)
VALUES
    ('John Doe', '123 Main Street, Anytown, CA 12345', '(123) 456-7890', 'john.doe@example.com'),
    ('Jane Doe', '456 Elm Street, Anytown, CA 12345', '(456) 789-0123', 'jane.doe@example.com');

INSERT INTO sales (sale_date, sale_time, sale_total)
VALUES
    ('2023-08-23', '10:00:00', 100.00),
    ('2023-08-23', '11:00:00', 200.00);

INSERT INTO sales_details (sale_id, product_id, quantity, sale_price)
VALUES
    (1, 1, 1, 10.00),
    (1, 2, 2, 20.00),
    (2, 3, 3, 30.00);



	SELECT * FROM products
	SELECT * FROM customers
	SELECT * FROM sales
	SELECT * FROM sales_details
	SELECT * FROM Category

		ALTER TABLE products DROP COLUMN product_description;

	ALTER TABLE products
ADD category_id INT





	/*simpl function*/
	CREATE FUNCTION descount(@Price DECIMAL(16,3))
	RETURNS DECIMAL(16,3)
	AS 
	BEGIN
	RETURN @price +(@price *10/100)
	END

	dbo.descount(price) AS 'well' FROM products


SELECT 
  product_name,
  customer_name,
  sale_date,
  category_name,
  sale_price
 -- SUM(sale_price) AS Total
FROM
  products
INNER JOIN sales_details ON products.product_id = sales_details.product_id
INNER JOIN customers ON customers.customer_id = 1
INNER JOIN sales ON sales_details.sale_id = sales.sale_id
INNER JOIN Category ON Category.category_id = customers.customer_id;




SELECT
  SUM(sale_price) AS total_sale_price
FROM
  products
INNER JOIN sales_details ON products.product_id = sales_details.product_id
INNER JOIN sales ON sales_details.sale_id = sales.sale_id
INNER JOIN customers ON products.product_id = customers.customer_id;






/*     --finel queiry--    */

 SELECT* FROM Category
 SELECT* FROM customers
  SELECT* FROM products
 SELECT* FROM sales
 SELECT* FROM sales_details

 ALTER TABLE sales
ADD FOREIGN KEY (customer_id) REFERENCES customers (customer_id);



 ALTER TABLE sales ADD   customer_id INT 


 ALTER TABLE sales DROP COLUMN sale_time

 



--total for one customer in one cel--
SELECT
  SUM(sale_price) AS total_sale_price
FROM
  sales
--INNER JOIN sales_details ON products.product_id = sales_details.product_id
INNER JOIN sales_details ON sales_details.sale_id = sales.sale_id
INNER JOIN customers ON sales.customer_id = 1;


--so easy to learn join just edit the coma to join --
/*
SELECT customer_name, sale_date, product_name, category_name, sale_price, quantity
FROM sales_details d, sales s,Category ca,customers cu,products p
where s.sale_id = d.sale_id
*/


SELECT customer_name, sale_date, product_name, sale_price, quantity
FROM sales_details d
JOIN sales s ON s.sale_id = d.sale_id
--JOIN Category ca ON ca.category_id = products.category_id
JOIN customers cu ON cu.customer_id = s.customer_id
JOIN products p ON p.product_id = d.product_id
 


 /*
	CREATE FUNCTION total (
  @customer_id INT
)
RETURNS INT
AS
BEGIN
  SELECT
    SUM(sale_price) AS total_sale_price
  FROM
    sales
  INNER JOIN sales_details ON sales_details.sale_id = sales.sale_id
  WHERE
    sales.customer_id = @customer_id;

  RETURN total_sale_price;
END;

*/


